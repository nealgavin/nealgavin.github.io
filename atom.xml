<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Neal Gavin]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-06T12:28:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[Neal Gavin]]></name>
    <email><![CDATA[nealgavin@126.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[画生活]]></title>
    <link href="http://yoursite.com/2015/09/06/life-draw/"/>
    <id>http://yoursite.com/2015/09/06/life-draw/</id>
    <published>2015-09-06T12:13:15.000Z</published>
    <updated>2015-09-06T12:28:06.000Z</updated>
    <content type="html"><![CDATA[<h1 id="哲学三问">哲学三问</h1><p>我是谁？<br>我从哪里来？<br>我要到哪里去？</p>
<h1 id="快速决策">快速决策</h1><p><strong> 要有自己的原则 </strong>，以生活为中心，一切的行为是为了生活的更美好。<br>1）健康的身体<br>2）充足的知识<br>3）计划型生活</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="哲学三问">哲学三问</h1><p>我是谁？<br>我从哪里来？<br>我要到哪里去？</p>
<h1 id="快速决策">快速决策</h1><p><strong> 要有自己的原则 </strong>，以生活为中心，一切的行为是为了生活的更美好。<br>1）健康的]]>
    </summary>
    
      <category term="think" scheme="http://yoursite.com/tags/think/"/>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[乱谈问题]]></title>
    <link href="http://yoursite.com/2015/08/12/qs-and-analyze/"/>
    <id>http://yoursite.com/2015/08/12/qs-and-analyze/</id>
    <published>2015-08-12T12:00:44.000Z</published>
    <updated>2015-08-23T08:49:40.000Z</updated>
    <content type="html"><![CDATA[<h1 id="问题的来源">问题的来源</h1><p>什么生<strong>问题</strong>?问题按我的理解就是你想做达到某种结果，但是在这个过程中总有各种障碍，这些就是问题所在！<br><a id="more"></a></p>
<h2 id="问题EG">问题EG</h2><p>假设你想成为音乐家，但是你不知道什么🎵？不知道什么样的音乐旋律是个什么是轻快的，什么样的能给人带来欢乐，那么问题就来了！你需要区了解这些东西，去达成音乐家的标准。<br>SO，要想解决这个问题就需要县分析清楚，什么是问题的来源，是什么导致了这个问题才能对症下药，治标治本。</p>
<h1 id="解决问题的方式">解决问题的方式</h1><h2 id="传统方法">传统方法</h2><p>解决问题的传统方法呢，就是针对问题本身，分析这个问题是什么导致，能不能去除造成该问题的诱因。或者是满足问题本身的需求。比方说：<br>现在大家都想快捷的获取信息，并且愿意为此付出一定的代价，这样就出炉了各种搜索引擎，从海量数据中找出你所想要的东西！还有各种推荐<br>的工具。现在的人生活好了，都变的懒了，很多都不想出门，因此就衍生出了各种的上门服务，也就是所谓的O2O。</p>
<h2 id="非主流方法">非主流方法</h2><p>一个人，你如果越满足他，那么他的要求会越来越高，幸福点会逐步拉高。因此，想要让其满意，不妨先不满足其需求，并且往其期望相反的方向<br>不断行动，这样他会越来越失望，其满足点也会因此不断的下调。这时在往其期望，稍稍加以努力，就能远超其下滑后的预期。<br>这就像，一个走沙漠的人，渴的很，可是就时没水喝呀没水喝，当其马上要崩溃的时候，送拉意小口水，他都会感激一辈子，都会觉得这水他体验<br>过的最为美好的东西，生活就是如此奇妙！</p>
<p>@@@@以上均属Gavin无聊时随意所些，仅是乐呵乐呵生活而已@@@@</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="问题的来源">问题的来源</h1><p>什么生<strong>问题</strong>?问题按我的理解就是你想做达到某种结果，但是在这个过程中总有各种障碍，这些就是问题所在！<br>]]>
    
    </summary>
    
      <category term="think" scheme="http://yoursite.com/tags/think/"/>
    
      <category term="think" scheme="http://yoursite.com/categories/think/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[10公里战斗]]></title>
    <link href="http://yoursite.com/2015/08/10/my-10km-fight/"/>
    <id>http://yoursite.com/2015/08/10/my-10km-fight/</id>
    <published>2015-08-10T14:13:37.000Z</published>
    <updated>2015-08-15T03:42:37.000Z</updated>
    <content type="html"><![CDATA[<p>上周末Summer Party，非常霸气的一标打中红心，斩获了头巾一块。<br><a id="more"></a><br><img src="http://d.pcs.baidu.com/thumbnail/4c2b8a02f1d3fe75e19694d47851f131?fid=3239644437-250528-242018121182369&amp;time=1439211600&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-EVEZEt5QCPD1vDPtl0EUoW3ZQBE%3D&amp;rt=sh&amp;expires=2h&amp;r=741943344&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p>
<p>开心之余，便和朋友一起去奥森来了次，说跑就跑的10公里！都快有几月没有好好的跑跑步，运动运动了。作为一个IT男，真心感觉一天到晚的在工位上写代码，体质一直在下降。没点运动量，真的难以长期保持旺盛的精力。生活，最怕的就是永远的一成不变，这对我来说是非常致命，如果生活过于平淡，再时间的消磨下，我很容易迷失自我，不知道前进的方向，也不知道我想要的生活是个什么样子。有时候，就应该有一些疯狂的想法和行动。也许在很多人眼中，跑个10公里或许没什么大不了的.但这对于我来说，确实是一个不小的挑战，但我跑过5公里的时候，体力就渐渐有些不支了，其实最重要的还是呼吸，已经不如之前那么顺畅了。当时只感觉，很累，很想休息！当时，心中就有一股想<strong>放弃</strong>的负能量在蔓延。我知道这非常可怕，一旦让这种情绪蔓延开来，将严重的阻碍我的成长，让我在前进的路上碰到挫折就想放弃。我非常坚信，只要不断的超越这种情绪，我就能够蜕变。但这总不是那么简单，我还是在6.5公里的时候停住的了脚步休息了2分钟，不断的调整呼吸，我也不想就这么被打败。当我重新迈开脚步时，状态还是急转直下，没跑几百米，呼吸就又跟不上节奏了。我知道，我的极限可能快到了。</p>
<p>不过@斌群@谢晖还是不断的换各种方式鼓励我，还用各种方式刺激我的斗志，走停了两次后，我还是果断的决定拼搏一次，人生难得有此挑战自我的机会，就算明天躺着医院，我也认了！提起一口气后，就开始跟上步伐，前进，前进！再前进！没过多久，那种该死的疲劳感，有重新的爬上了我的身躯，这种感觉真的很让人抓狂，那种不甘心的抓狂。终于，我向这种情绪发出了我的怒吼！很奇怪，当我决定开始不顾一切的争斗时，疲劳感反而降低了，我知道那是一种信念。<strong>@斌群</strong>还是在那不停的刺激着我的斗志，说“假设你一直等候的人正在3公里后的终点等着我，我怎么能就这样放弃呢？”，不论是何种情况。我的斗志都已经在疯狂燃烧了，那不屈的青春！之后，每单我感觉疲劳的时候，我总会狂吼一声，这已经不是简单的跑步了，这是一场和自己的较量。就这样，差不多每隔100米我总会发出不屈的怒吼，仿佛奥森的夜下，成了我的战场。我的吼声也吸引了不少人的目光，正常时候的我，遇见这样的目光或许会畏惧。但此刻的我，已经完全战胜了这一切。<br>总于在最后1KM时，我发出了最后的怒吼，开始加速狂奔，真的很难想象，我当时就这样跑到了最后的终点。</p>
<p><img src="http://d.pcs.baidu.com/thumbnail/352ece829d0d03b4518e71639187ece2?fid=3239644437-250528-225646482907751&amp;time=1439215200&amp;sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-l7ojTOMzId7hcxH53jct2EM1eKw%3D&amp;rt=sh&amp;expires=2h&amp;r=278382336&amp;sharesign=unknown&amp;size=c710_u500&amp;quality=100" alt=""></p>
<p>当我穿过最后的终点线，我知道我成功了！我战胜了自己！这种感觉，绝对不亚于ACM中,再最后一刻AC所带来的快感。那时我对自己充满了信心，万法归一，无论是生活还是工作，当处于低谷时，一定要撑住，顽强的战斗下去，总能得到意想不到的收获！这很像很多小说里面写的，虽然都是虚构的，但男主的奋斗历程还是非常值得借鉴的！</p>
<p>  Cheer up ! I Can do it ! It’s time to fight!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上周末Summer Party，非常霸气的一标打中红心，斩获了头巾一块。<br>]]>
    
    </summary>
    
      <category term="fight" scheme="http://yoursite.com/tags/fight/"/>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[raspberry 的安装流程]]></title>
    <link href="http://yoursite.com/2015/04/03/raspberry/"/>
    <id>http://yoursite.com/2015/04/03/raspberry/</id>
    <published>2015-04-03T11:20:07.000Z</published>
    <updated>2015-08-23T08:46:50.000Z</updated>
    <content type="html"><![CDATA[<p>今天把玩了一下树莓派，就顺带写个文章供新手作参考了。</p>
<h1 id="安装准备">安装准备</h1><ol>
<li>SD卡</li>
<li>Raspberry Pi</li>
<li>显示器</li>
<li>各种连接线（USB，HDMI）</li>
<li>键盘</li>
<li>鼠标</li>
</ol>
<a id="more"></a>
<h2 id="介绍">介绍</h2><p>其实树莓派本身可以看成是电脑主板，只是还自带了CPU，GPU，内存条<br>因此SD卡的作用就是电脑中的硬盘的作用。装上系统，插上显示器，鼠标，键盘就成了迷你的电脑了。自然也有很好的扩展性，可接电视等各种设备。</p>
<p>##系统安装<br>用Win32DiskImager把系统镜像写入SD卡，插入<strong>Raspberry Pi</strong>直接启动就可以自动安装了。<br>Win32DiskImager和系统请点击<a href="http://pan.baidu.com/s/1c0nPftI" target="_blank" rel="external">这里</a>我这里用的系统是<strong>2015-02-16-raspbian-wheezy</strong><br>你们自然也可以选用其它的系统来完成。<br>win32DiskImager向SD卡写数据 <img src="http://7xif4j.com1.z0.glb.clouddn.com/gavinQQ图片20150403194152.png" alt="pic"></p>
<h2 id="连接显示器">连接显示器</h2><p>我接的是LG的大显示器，需要修改配置，在配置里加入两行代码</p>
<pre><code>hdmi_mode=<span class="number">9</span>    <span class="number">800</span>x600   <span class="number">60</span>Hz 
hdmi_ignore_edid=<span class="number">0xa5000080</span>
</code></pre><p>你们可以根据自身情况作参考，否则显示器显示不出任何东西。<br>之后连接各种设备，<img src="http://7xif4j.com1.z0.glb.clouddn.com/gavinP50403-140211.jpg" alt="pic"><br><img src="http://7xif4j.com1.z0.glb.clouddn.com/gavinP50403-150810.jpg" alt="pic"><br>之后，系统就自己安装好了。期间点击一次重启就好了。因为是英国人设计的所以要改下键盘设置，<br>键盘设置请参考<a href="http://blog.csdn.net/c80486/article/details/8460271" target="_blank" rel="external">这里</a></p>
<ul>
<li>startx:进入图形界面</li>
<li>sudo poweroff：关机</li>
<li>登录的默认账号是pi，密码是raspberry</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天把玩了一下树莓派，就顺带写个文章供新手作参考了。</p>
<h1 id="安装准备">安装准备</h1><ol>
<li>SD卡</li>
<li>Raspberry Pi</li>
<li>显示器</li>
<li>各种连接线（USB，HDMI）</li>
<li>键盘</li>
<li>鼠标</li>
</ol>]]>
    
    </summary>
    
      <category term="树莓派" scheme="http://yoursite.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[归途]]></title>
    <link href="http://yoursite.com/2015/02/06/home/"/>
    <id>http://yoursite.com/2015/02/06/home/</id>
    <published>2015-02-06T10:24:04.000Z</published>
    <updated>2015-08-23T08:49:12.000Z</updated>
    <content type="html"><![CDATA[<p>已经快一年没有回去了，真的好怀念南方的日子。南方的天气，南方的习俗，南方的口味。<br><a id="more"></a><br>北京，无数青年为之疯狂的帝都，又称之为魔都。人口拥挤不堪，生活压力大，但也有着无数的机遇，这是年轻人所追求的东西。这里承载着无数青年的梦想，能来帝都，说实在还真是比较偶然。因为我向来反感帝都的环境，灰蒙蒙的天空，让人有种生化危机的感觉。13号地铁是所有上班族的恶梦，清早的地铁门口能排满近20米的人！看着情景都感觉疯狂。</p>
<p>但事物总是有其两面性，正是因为这艰苦的条件，磨砺了无数的青年才俊。我喜欢看玄幻类的小说，里面的主角都是经历过各种磨难才成长起来的，磨难是成长的基石。北京有竞争，而且很激烈，我一直认为竞争是成长的催化济，只有不断的竞争才能让真正的人才脱颖而出。但竞争是残酷的，因为有人成长，就必须有人做养料，这些人绝大多数都是在社会的底层，有些人被生生活消磨的斗志，那就永远只能留在社会底层。而那些成功的人，则平步青云。但成功的人总有一种<strong>特质</strong>，他们知道自己想要什么东西，有着明确的目标，不会在物欲横流的北京迷失自己的方向，有着超强的执行力，知道自己应该做什么，应该怎么做。但这种人总归是少数的。</p>
<p>很多人认为要成功就去看各种<strong>鸡汤</strong>，而不断的去看成功学，但其实应该去看看，别人是怎么失败的，因为什么，把这些全都避免，其实也就不远了。呵呵!</p>
<p>今天，终于踏上了归途。远离了这个城市。最初来北京的原因，很简单，我就是想知道为什么会有那么多人迷恋北京，环境差，压力大。当我来到这个城市之后，我才知道，其实这座城市有它的魅力，因为所有的有志之才都聚集在了这里，你可以认识到很多有远见的人，和这些人在一起，你可以成长的很快，所以你才能够快速的成长。</p>
<p>呵呵!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>已经快一年没有回去了，真的好怀念南方的日子。南方的天气，南方的习俗，南方的口味。<br>]]>
    
    </summary>
    
      <category term="吐嘈" scheme="http://yoursite.com/tags/%E5%90%90%E5%98%88/"/>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[awk使用介绍]]></title>
    <link href="http://yoursite.com/2015/02/02/awk-introduce/"/>
    <id>http://yoursite.com/2015/02/02/awk-introduce/</id>
    <published>2015-02-02T07:22:42.000Z</published>
    <updated>2015-08-23T08:46:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="AWK介绍">AWK介绍</h1><p>AWK是一种优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。这种编程及数据操作语言（其名称得自于它的创始人阿尔佛雷德·艾侯、彼得·温伯格和布莱恩·柯林汉姓氏的首个字母）的最大功能取决于一个人所拥有的知识。</p>
<p>##awk特点##<br>AWK 提供了极其强大的功能：可以进行样式装入、流控制、数学运算符、进程控制语句甚至于内置的变量和函数。它具备了一个完整的语言所应具有的几乎所有精美特性。实际上 AWK 的确拥有自己的语言：AWK 程序设计语言， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。<br>尽管操作可能会很复杂，但命令的语法始终是：<br><code>awk &#39;{pattern + action}&#39;</code> 或者 <code>awk &#39;pattern {action}&#39;</code><br>其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号 ({}) 不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。<br><a id="more"></a></p>
<h2 id="调用方式">调用方式</h2><p>awk提供了适应多种需要的不同解决方案，它们是：</p>
<pre><code>一、 awk命令行，你可以象使用普通UNIX命令一样使用awk，在命令行中你也可以使用awk程序设计语言，虽然awk支持多行的录入，但是录入长长的命令行并保证其正确无误却是一件令人头疼的事，因此，这种方法一般只用于解决简单的问题。当然，你也可以在shell script程序中引用awk命令行甚至awk程序脚本。

二、使用<span class="operator">-f</span>选项调用awk程序。awk允许将一段awk程序写入一个文本文件，然后在awk命令行中用<span class="operator">-f</span>选项调用并执行这段程序。具体的方法我们将在后面的awk语法中讲到。

三、利用命令解释器调用awk程序：利用UNIX支持的命令解释器功能，我们可以将一段awk程序写入文本文件，然后在它的第一行加上：
`<span class="comment">#!/bin/awk -f`</span>
并赋予这个文本文件以执行的权限。这样做之后，你就可以在命令行中用类似于下面这样的方式调用并执行这段awk程序了。
</code></pre><h2 id="内置变量">内置变量</h2><p>awk借用shell的方法，用1,2,3…这样的方式来顺序地表示行（记录）中的不同字段。特殊地，awk用0表示整个行（记录）。不同的字段之间是用称作分隔符的字符分隔开的。系统默认的分隔符是空格。awk允许在命令行中用-F re的形式来改变这个分隔符。事实上，awk用一个内置的变量RS来记忆这个分隔符。awk中有好几个这样的内置变量，例如，记录分隔符变量RS、当前工作的记录数NR等等，本文后面的附表列出了全部的内置变量。这些内置的变量可以在awk程序中引用或修改，例如，你可以利用NR变量在模式匹配中指定工作范围，也可以通过修改记录分隔符RS让一个特殊字符而不是换行符作为记录的分隔符。<br>例：显示文本文件myfile中第七行到第十五行中以字符%分隔的第一字段，第三字段和第七字段：<br><code>awk -F % &#39;NR&gt;=7,NR&lt;=15 {print $1 $3 $7}&#39; myfile</code></p>
<h3 id="变量介绍">变量介绍</h3><p>awk提供了有很多内置变量，如果你经常使用awk处理文本，了解这些这些内置变量的使用是很有必要的。下面看一下这些内置变量的详细介绍。</p>
<ol>
<li>ARGC命令行参数个数（不包括awk的选项和awk的程序内容）。</li>
</ol>
<ul>
<li>ARGIND 当前正在处理的ARGV中的文件的索引值（同时处理多个文件时会用到）。</li>
<li>ARGV 命令行参数序列数组，下标从0开始。</li>
<li>CONVFMT 数字转换格式，和C语言中的数字输出格式化类似，默认为”%.6g”。</li>
<li>ENVIRON 当前系统的环境变量。</li>
<li>ERRNO 出错时的错误信息。</li>
<li>FIELDWIDTHS 以空格分隔的字段宽度，如果指定此变量，awk将会用指定的宽度替换变量FS指定的分隔符</li>
<li>FILENAME 当前正在处理的文件名，该变量不能在BEGIN块中使用。</li>
<li>FNR当前处理的记录号。</li>
<li>FS 字段的分隔符，默认为空格。</li>
<li>IGNORECASE 如果该变量设置为非0值，在进行字符串匹配时忽略大小写。</li>
<li>NF 当前记录中的字段个数。</li>
<li>NR 已经读出的记录数。</li>
<li>OFMT 数字的输出格式。</li>
<li>OFS 输出的字段分隔符，默认为空格。</li>
<li>ORS 输出的记录分隔符，默认为新行。</li>
<li>RS 输入记录的分隔符，默认为新行。</li>
<li>RSTART 被match（）函数匹配的字符串的起始位置，如果没有匹配则为0（从1开始）。</li>
<li>RLENGTH 被match（）函数匹配的字符串的长度。</li>
<li>SUBSEP数组中多个下标的分隔符，默认为”\034”。<h3 id="内置函数">内置函数</h3>内置的字符串函数<br><table><tr><td>函数</td><td>作用</td></tr><br><tr><td>gsub(r,s)</td><td>在整个$0中用s代替r</td></tr><br><tr><td>gsub(r,s,t)</td><td>在整个t中用s替代r</td></tr><br><tr><td>index(s,t)</td><td>返回s中字符串t的第一位置</td></tr><br><tr><td>length(s)</td><td>返回s长度</td></tr><br><tr><td>match(s,r)</td><td>测试s是否包含匹配r的字符串</td></tr><br><tr><td>split(s,a,fs)</td><td>在fs上将s分成序列a</td></tr><br><tr><td>sprint(fmt,exp)</td><td>返回经fmt格式化后的exp</td></tr><br><tr><td>sub(r,s)</td><td>用$0中最左边最长的子串代替s</td></tr><br><tr><td>substr(s,p)</td><td>返回字符串s中从p开始的后缀部分</td></tr><br><tr><td>substr(s,p,n)</td><td>返回字符串s中从p开始长度为n的后缀部分</td></tr></table><h3 id="内置数值函数">内置数值函数</h3></li>
<li>int(x) : 求出x 的整数部份，朝向0 的方向做舍去。eg: int(3.9)是3，int(-3.9) 是-3。 </li>
<li>sqrt(x) : 求出x 正的平方根值。eg: sqrt(4)=2 </li>
<li>exp(x) : 求出x 的次方。eg: exp(2) 即是求e*e 。 </li>
<li>log(x) : 求出x 的自然对数。 </li>
<li>sin(x) : 求出x 的sine 值，x 是弪度量。 </li>
<li>cos(x) : 求出x 的cosine 值，x 是弪度量。 </li>
<li>atan2(y,x) :    求y/x 的arctangent 值，所求出的值其单位是弪度量。 </li>
<li>rand() : 得到一个随机数(平均分布在0和1之间)。每次执行gawk，* rand从相同的seed生成值。 </li>
<li>srand(x) : 设定产生随机数的seed为x。如果在第二次运行awk程序时你设定相同的seed值，你将再度得到相同序列的随机数。如果省略引数x，例如srand()，则当前日期时间会被当成seed。这个方法可使得随机数值是真正不可预测的。 </li>
<li><p>srand() : 其值是当次awk_script运行过程中前次srand(x)的设定的seed值x,。 </p>
<h3 id="自定义函数">自定义函数</h3><p>复杂的awk常常可以使用自己定义的函数来简化。调用自定义的函数与调用内置函数的方法一样。 </p>
</li>
<li><p>1) 自定义函数定义的格式: 自定义函数可以在awk程序的任何地方定义。<br><code>function fun_name (parameter_list) {    // parameter_list是以逗号分隔的参数列表 
body-of-function    // 函数体，是awk语句块 
}</code> </p>
</li>
<li>2) 举例:<br><code>awk &#39;{ print &quot;sum =&quot;,SquareSum($1,$2) } 
function SquareSum(x,y) { sum=x*x+y*y ; return sum } &#39; grade.txt</code> <h1 id="使用">使用</h1><h2 id="awk_script的组成:">awk_script的组成:</h2></li>
<li>① awk_script可以由一条或多条awk_cmd组成，两条awk_cmd之间一般以NEWLINE分隔 </li>
<li>② awk_cmd由两部分组成: awk_pattern { actions } </li>
<li>③ awk_script可以被分成多行书写，必须确保整个awk_script被单引号括起来。 <h2 id="awk命令的一般形式:">awk命令的一般形式:</h2><code>awk &#39; BEGIN { actions } 
awk_pattern1 { actions } 
............ 
awk_patternN { actions } 
END { actions } 
&#39; inputfile</code><br>其中 BEGIN { actions } 和 END { actions } 是可选的。 <h2 id="awk的运行过程:">awk的运行过程:</h2></li>
<li>① 如果BEGIN 区块存在，awk执行它指定的actions。 </li>
<li>② awk从输入文件中读取一行，称为一条输入记录。(如果输入文件省略，将从标准输入读取) </li>
<li>③ awk将读入的记录分割成字段，将第1个字段放入变量$1中，第2个字段放入$2，以此类推。$0表示整条记录。字段分隔符使用shell环境变量IFS或由参数指定。 </li>
<li>④ 把当前输入记录依次与每一个awk_cmd中awk_pattern比较，看是否匹配，如果相匹配，就执行对应的actions。如果不匹配，就跳过对应的actions，直到比较完所有的awk_cmd。 </li>
<li>⑤ 当一条输入记录比较了所有的awk_cmd后，awk读取输入的下一行，继续重复步骤③和④，这个过程一直持续，直到awk读取到文件尾。 </li>
<li>⑥ 当awk读完所有的输入行后，如果存在END，就执行相应的actions。 </li>
</ul>
<h2 id="awk_Pattern">awk Pattern</h2><p>awk_pattern模式部分决定actions动作部分何时触发及触发actions。awk_pattern可以是以下几种类型: </p>
<h3 id="1)_正则表达式用作awk_pattern:_/regexp/">1) 正则表达式用作<code>awk_pattern: /regexp/</code></h3><ul>
<li>① awk中正则表达式匹配操作中经常用到的字符:<br>^ $ . [] | () * // 通用的regexp元字符<br>+ : 匹配其前的单个字符一次以上，是awk自有的元字符，不适用于grep或sed等<br>? : 匹配其前的单个字符1次或0次，是awk自有的元字符，不适用于grep或sed等 </li>
<li>② 举例:<br><code>awk &#39;/ *$0.[0-9][0-9].*/&#39; input_file</code> <h3 id="2)_布尔表达式用作awk_pattern，表达式成立时，触发相应的actions执行。">2) 布尔表达式用作awk_pattern，表达式成立时，触发相应的actions执行。</h3></li>
<li>① 表达式中可以使用变量(如字段变量$1,$2等)和/regexp/ </li>
<li>② 布尔表达式中的操作符:<br>关系操作符: &lt; &gt; &lt;= &gt;= == !=<br>匹配操作符: value ~ /regexp/ 如果value匹配/regexp/，则返回真<br>value !~ /regexp/ 如果value不匹配/regexp/，则返回真<br>举例: <code>awk &#39;$2 &gt; 10 {print &quot;ok&quot;}&#39; input_file</code><br><code>awk &#39;$3 ~ /^d/ {print &quot;ok&quot;}&#39; input_file</code> </li>
<li>③ &amp;&amp;(与) 和 ||(或) 可以连接两个/regexp/或者布尔表达式，构成混合表达式。!(非) 可以用于布尔表达式或者/regexp/之前。<br>举例: <code>awk &#39;($1 &lt; 10 ) &amp;&amp; ($2 &gt; 10) {print &quot;ok&quot;}&#39; input_file</code><br><code>awk &#39;/^d/ || /x$/ {print &quot;ok&quot;}&#39; input_file</code> </li>
<li>④ 其它表达式用作awk_script，如赋值表达式等<br>eg: <code>awk &#39;(tot+=$6); END{print &quot;total points :&quot; tot }&#39; input_file</code>// 分号不能省略<br><code>awk &#39;tot+=$6 {print $0} END{print &quot;total points :&quot; tot }&#39; input_file</code>// 与上面等效 <h2 id="action">action</h2>actions就是对awk读取的记录数据进行的操作。actions由一条或多条语句或者命令组成，语句、命令之间用分号(;)分隔。actions中还可以使用流程控制结构的语句。 <h3 id="1)_awk的命令:">1) awk的命令:</h3></li>
<li>① print 参数列表 : print可以打印字符串(加双引号)、变量和表达式，是awk最基本的命令。参数列表要用逗号(,)分隔，如果参数间用空格分隔，打印出时参数值之间不会有空格。 </li>
<li>② printf ([格式控制符]，参数) : 格式化打印命令(函数)，语法与C语言的printf函数类似。 </li>
<li>③ next : 强迫awk立刻停止处理当前的记录,而开始读取和处理下一条记录。 </li>
<li>④ nextfile : 强迫awk立刻停止处理当前的输入文件而处理输入文件列表中的下一个文件 </li>
<li>⑤ exit : 使awk停止执行而跳出。如果有END 存在，awk会去执行END 的actions。 </li>
</ul>
<h3 id="2)_awk的语句:_awk的语句主要是赋值语句，用来给变量赋值。">2) awk的语句: awk的语句主要是赋值语句，用来给变量赋值。</h3><ul>
<li>① 把直接值或一个变量值赋值给变量。如果直接值是字符串要加双引号。<br>举例: <code>awk &#39;BEGIN {x=1 ; y=3 ; x=y ; print &quot;x=&quot; x &quot; ; y=&quot; y }&#39;</code> </li>
<li>② 把一个表达式的值赋值给变量。表达式一般是数值表达式，也可以是其它表达式。<br>数值表达式: <code>num1 operator num2</code><br>operator可以是: +(加) -(减) *(乘) /(除) %(取模) ^(求幂)<br>当num1或者num2是字符串而是不是数字时，无论是否加有双引号，awk都视其值为0<br>条件选择表达式: A?B:C (A为布尔表达式，B和C可以是表达式或者直接值)<br>当布尔表达式A的值为真时，整个表达式的值为B，A的值为假时，整个表达式的值为C<br>举例: <code>awk &#39;BEGIN {x=3 ; x+=2 ; y=x+2 ; print &quot;x=&quot; x &quot; ; y=&quot; y }&#39;</code><br><code>awk &#39;BEGIN {x=3 ; y=x&gt;4?&quot;ok&quot;:4 ; print &quot;x=&quot; x &quot; ; y=&quot; y }&#39;</code> </li>
<li>③ 为了方便书写，awk也支持C语言语法的赋值操作符: += -= *= /= %= ^= ++ – </li>
</ul>
<h3 id="3)_流程控制结构_(基本上是使用C语言的语法)">3) 流程控制结构 (基本上是使用C语言的语法)</h3><p>其中condition一般为布尔表达式，body和else-body是awk语句块。 </p>
<ul>
<li>① if (condition) {then-body} [else {else-body}] </li>
<li>② while (condition) {body} </li>
<li>③ do {body} while (condition) </li>
<li>④ for (initialization; condition; increment) {body}<br>与C语言的for结构的语法相同。 </li>
<li>⑤ break : 跳出包含它的for、while、do-while 循环 </li>
<li>⑥ continue : 跳过for、while、do-while循环的body的剩余部分，而立刻进行下一次循环的执行。 </li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="AWK介绍">AWK介绍</h1><p>AWK是一种优良的文本处理工具，Linux及Unix环境中现有的功能最强大的数据处理引擎之一。这种编程及数据操作语言（其名称得自于它的创始人阿尔佛雷德·艾侯、彼得·温伯格和布莱恩·柯林汉姓氏的首个字母）的最大功能取决于一个人所拥有的知识。</p>
<p>##awk特点##<br>AWK 提供了极其强大的功能：可以进行样式装入、流控制、数学运算符、进程控制语句甚至于内置的变量和函数。它具备了一个完整的语言所应具有的几乎所有精美特性。实际上 AWK 的确拥有自己的语言：AWK 程序设计语言， 三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。<br>尽管操作可能会很复杂，但命令的语法始终是：<br><code>awk &#39;{pattern + action}&#39;</code> 或者 <code>awk &#39;pattern {action}&#39;</code><br>其中 pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号 ({}) 不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。<br>]]>
    
    </summary>
    
      <category term="awk" scheme="http://yoursite.com/tags/awk/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MarkDown语法]]></title>
    <link href="http://yoursite.com/2015/01/23/MarkDown/"/>
    <id>http://yoursite.com/2015/01/23/MarkDown/</id>
    <published>2015-01-23T07:46:54.000Z</published>
    <updated>2015-08-23T08:48:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基本概念">基本概念</h1><p><strong>MarkDown</strong>的目标是实现易读易写，高逼格。<br>像非前端专业人员，总是想着能够用简单的方式来达到前端专业的的展现水准，也就是所谓的<code>Text-&gt;HTML</code>的映射关系。令人欣慰的是<strong>MarkDown</strong>就是这样的一种语言。用 <strong>MarkDown</strong>可以 简洁，大方，优雅的完成这一功能。</p>
<p><strong>MarkDown</strong>的语法全是由一些符号组成的，这些符号都是精挑细选的，作用一目了然。让使用者可以将精力全部放在内容上，而不用过于关注内容布局。不过<strong>MarkDown</strong>并不是HTML的替代品，它只是为HTML的某些常用功能作了简化而已。在 <strong>MarkDown</strong>中你可以插入HTML代码。 <strong>MarkDown</strong>的原理其实就是对它自己定义的类型进行映射其余的原封不动。所以只要学会常用的映射方式就好了。<br>eg:<br><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Neal Gavin&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code><br>这代码的效果如下：</p>
<p><table><tr><td>Neal Gavin</td></tr></table><br><a id="more"></a></p>
<h2 id="特殊字符自动转换">特殊字符自动转换</h2><p>HTML中<code>&lt;</code>和<code>&amp;</code>是特殊字符.<code>&lt;</code>：用事标签起始，<code>&amp;</code>：标记HTML实体<br>如果要显示这些字符，就需要使用实体青工表示<code>&amp;lt;</code>-&gt;’&lt;’ <code>&amp;amp</code>-&gt;’&amp;’.<br>不过MarkDown可以帮你搞定，你只要写符号就好了。<br>你要写<code>1&lt;2</code> MarkDown会把它映射成<code>1 &amp;lt; 2</code></p>
<h1 id="区块元素">区块元素</h1><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行.也就是可以用两个换行来划分一个段落。也可以使用<code>&lt;\br&gt;</code></p>
<h2 id="标题">标题</h2><p>标题支持两种格式，类 Setext 形式是用底线的形式，利用 = （最高阶标题）和-（第二阶标题），例如：</p>
<p>Markdown 支持两种标题的语法，类 [Setext] [1] 和类 [atx] [2] 形式。</p>
<p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如： </p>
<pre><code><span class="header"> H1
=============</span>

<span class="header"> H2
-------------</span>
</code></pre><p>也可以是这样</p>
<pre><code><span class="preprocessor"># H1</span>
<span class="preprocessor">## H2</span>
...
</code></pre><h2 id="区块引用">区块引用</h2><p>引用使用的是<code>&gt;</code></p>
<pre><code>&gt;这就是引用
&gt;引用
</code></pre><p>效果：</p>
<blockquote>
<p>这就是引用<br>引用</p>
</blockquote>
<p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p>
<pre><code>&gt; This <span class="keyword">is</span> <span class="keyword">the</span> <span class="keyword">first</span> level <span class="keyword">of</span> quoting.
&gt;
&gt; &gt; This <span class="keyword">is</span> nested blockquote.
&gt;
&gt; Back <span class="keyword">to</span> <span class="keyword">the</span> <span class="keyword">first</span> level.
</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p>
<pre><code>&gt; <span class="comment">## 这是一个标题。</span>
&gt; 
&gt; <span class="number">1</span>.   这是第一行列表项。
&gt; <span class="number">2</span>.   这是第二行列表项。
&gt; 
&gt; 给出一些例子代码：
&gt; 
&gt;     <span class="built_in">return</span> shell_<span class="built_in">exec</span>(<span class="string">"echo <span class="variable">$input</span> | <span class="variable">$markdown_script</span>"</span>);
</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p>
<p>##列表<br>无序列表用<code>*</code>.</p>
<pre><code><span class="bullet">* </span>Red
<span class="bullet">* </span>Black
</code></pre><p>效果：</p>
<ul>
<li>Red</li>
<li>Black</li>
</ul>
<p>有序用数字</p>
<pre><code><span class="number">1.</span> Red
<span class="number">2.</span> Black
</code></pre><ol>
<li>Red</li>
<li><p>Black</p>
<ul>
<li>Read</li>
<li>sdf</li>
<li>sdf</li>
</ul>
</li>
</ol>
<h2 id="代码区块">代码区块</h2><p>代码区块很简单，缩进4个空格或一个制表。</p>
<pre><code>这是一个普通的代码区块
</code></pre><h2 id="分隔线">分隔线</h2><p>多个<code>********</code>形成分隔线，如下：</p>
<hr>
<p>#区段元素</p>
<p>##链接<br><strong>MarkDown</strong>支持两种形式</p>
<ol>
<li>行内式：<br><code>[内容](链接“这个是Title可不加”)</code></li>
<li>参考式：<br><code>[内容][标记]</code> 这个需要在页面的其它地方用<code>[标记]：内容来表示</code><br>链接内容定义的形式为：</li>
</ol>
<ul>
<li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li>
<li>接着一个冒号</li>
<li>接着一个以上的空格或制表符</li>
<li>接着链接的网址</li>
<li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li>
</ul>
<h2 id="强调">强调</h2><p><strong>MarkDown</strong> 使用<code>*</code>或<code>_</code>来标记强调词的符号，如果用两个就会被作为<code>&lt;strong&gt;</code></p>
<h2 id="代码">代码</h2><p>小段代码用`` 反引号把它包起来。</p>
<h2 id="图片">图片</h2><p>用<code>![内容]（链接）&quot;标题，可省&quot;</code><br>详细叙述如下：</p>
<ul>
<li>一个惊叹号 !</li>
<li>接着一个方括号，里面放上图片的替代文字</li>
<li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li>
</ul>
<h3 id="自动链接">自动链接</h3><p><code>&lt;url&gt;</code></p>
<h2 id="反斜杠">反斜杠</h2><p><strong>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号</strong><br><code>\*test\*</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="基本概念">基本概念</h1><p><strong>MarkDown</strong>的目标是实现易读易写，高逼格。<br>像非前端专业人员，总是想着能够用简单的方式来达到前端专业的的展现水准，也就是所谓的<code>Text-&gt;HTML</code>的映射关系。令人欣慰的是<strong>MarkDown</strong>就是这样的一种语言。用 <strong>MarkDown</strong>可以 简洁，大方，优雅的完成这一功能。</p>
<p><strong>MarkDown</strong>的语法全是由一些符号组成的，这些符号都是精挑细选的，作用一目了然。让使用者可以将精力全部放在内容上，而不用过于关注内容布局。不过<strong>MarkDown</strong>并不是HTML的替代品，它只是为HTML的某些常用功能作了简化而已。在 <strong>MarkDown</strong>中你可以插入HTML代码。 <strong>MarkDown</strong>的原理其实就是对它自己定义的类型进行映射其余的原封不动。所以只要学会常用的映射方式就好了。<br>eg:<br><code>&lt;table&gt;
    &lt;tr&gt;
        &lt;td&gt;Neal Gavin&lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;</code><br>这代码的效果如下：</p>
<p><table><tr><td>Neal Gavin</td></tr></table><br>]]>
    
    </summary>
    
      <category term="MarkDown" scheme="http://yoursite.com/tags/MarkDown/"/>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[博客开拍]]></title>
    <link href="http://yoursite.com/2015/01/22/%E5%8D%9A%E5%AE%A2%E5%BC%80%E6%8B%8D/"/>
    <id>http://yoursite.com/2015/01/22/博客开拍/</id>
    <published>2015-01-22T08:57:52.000Z</published>
    <updated>2015-08-23T08:47:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="序">序</h2><p>  博客开拍了，今天去买了个info的域名，本想买个10年8年的，奈何此域名越到后面，单价涨的太快，买不起啊！只能先买个1年，等等哪天有钱了，多续点吧！<a href="nealgavin.info">nealgaivn.info</a>这个域名还是很喜欢的！<br><a id="more"></a></p>
<h2 id="工作">工作</h2><p>百度的老wiki真的有点讨厌，各种权限限制，想查查看看机器学习方面的知识。却总是被权限给<strong>cha</strong>住了。<br>不说了，要赶紧工作了！!!</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="序">序</h2><p>  博客开拍了，今天去买了个info的域名，本想买个10年8年的，奈何此域名越到后面，单价涨的太快，买不起啊！只能先买个1年，等等哪天有钱了，多续点吧！<a href="nealgavin.info">nealgaivn.info</a>这个域名还是很喜欢的！<br>]]>
    
    </summary>
    
      <category term="DNSpod" scheme="http://yoursite.com/tags/DNSpod/"/>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[新blog搭起的第一篇]]></title>
    <link href="http://yoursite.com/2015/01/21/%E6%96%B0blog%E6%90%AD%E8%B5%B7%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>http://yoursite.com/2015/01/21/新blog搭起的第一篇/</id>
    <published>2015-01-21T06:50:54.000Z</published>
    <updated>2015-08-23T08:50:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="起因">起因</h2><p>上周末看到<a href="http://darkrhythm.net/" target="_blank" rel="external">群神</a>高大上的blog，瞬间很是仰慕，感觉这才像是个真正的blog。就向<a href="http://darkrhythm.net/" target="_blank" rel="external">群神</a>请教了下blog的搭建。经过两天的努力，终于把这个blog给搞起来了，呵呵！<br><a id="more"></a></p>
<h2 id="各种坑">各种坑</h2><h3 id="每一坑">每一坑</h3><p>期间那是各种坑啊！<em>git</em> 下的慢的要死，<em>node.js</em>也装不上，总之不是太顺。几经努力，终于把blog搭起来了，可惜啊！为了栏目什么的又费了不少时间，还以为要加各种东西呢！其实下的pacman的主题都给搞好了，只要加就好了，也不知道是不是第一次的姿势不对，反正当时不行。然后就是各种配，各种改，才发现被坑了。</p>
<h3 id="第二坑">第二坑</h3><p>这个就是真坑了，配的时候因为没有评论框，一想没评论框怎么能行！就开始搜各种相关资料，开始配。<br>结果，傻逼呵呵的！<a href="http://duoshuo.com/" target="_blank" rel="external">duoshuo</a>上没有注册站点，怎么用？这个坑了我不少时间。不过这个不算是深坑。真正的深坑是<a href="https://github.com/wuchong/jacman" target="_blank" rel="external">pacman</a>主题中的comment注释也会补读入到代码中</p>
<pre><code><span class="label">duoshuo_shortname:</span> nealgavin <span class="preprocessor">#这个注释会被代码读入</span>
</code></pre><p>这个代码中缺少了对注释过滤逻辑。</p>
<h2 id="blog使用">blog使用</h2><p>踩的坑是很多，不过blog是起来了！以后可能就直接在这上面写平常的blog。希望可以坚持写博客，也尽量写些带点含金量的文章，不过能力所限，欢迎各路大神的指导！我也很乐意能认识到更多的朋友。</p>
<h3 id="最后赞一个markdown真的很好用@-@">最后赞一个markdown真的很好用@-@</h3>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="起因">起因</h2><p>上周末看到<a href="http://darkrhythm.net/">群神</a>高大上的blog，瞬间很是仰慕，感觉这才像是个真正的blog。就向<a href="http://darkrhythm.net/">群神</a>请教了下blog的搭建。经过两天的努力，终于把这个blog给搞起来了，呵呵！<br>]]>
    
    </summary>
    
      <category term="吐嘈" scheme="http://yoursite.com/tags/%E5%90%90%E5%98%88/"/>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
</feed>
